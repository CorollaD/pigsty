---
#==============================================================#
# Stage 1: Setup DNS and resolver
#==============================================================#
- name: Setup docker service
  tags: docker_setup
  block:
    - name: Install docker and kubernetes
      package: name="{{ item }}" state=present
      with_items: [docker-ce, kubelet, kubeadm, kubectl]

    - name: Add vagrant to docker group
      user: name=vagrant group=docker

    - name: Make sure /etc/docker exists
      file: path=/etc/docker state=directory mode=0755

    - name: Overwrite /etc/docker/daemon.json
      template: src=daemon.json dest=/etc/docker/daemon.json

    - name: Launch docker service unit
      systemd: name=docker state=restarted enabled=yes daemon_reload=yes

    # Condition Check: whether docker cache exists
    - name: Check pigsty repo cache exists
      stat: path=/www/pigsty/docker-images.tar.lz4
      register: docker_cache

    - name: Load docker image cache if exists
      when: docker_cache.stat.exists
      shell: cat /www/pigsty/docker-images.tar.lz4 | lz4 -d - | docker load

    - name: Config kubelet default options
      template: src=kubelet.default dest=/etc/default/kubelet


- name: Bootstrap kubernetes master node
  when: k8s_role == 'master'
  tags: k8s_master
  block:
    # kubeadm init
    - name: Kubeadm config images pull test
      ignore_errors: true
      command: kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers
    - name: Kubeadm init kubeternetes master
      command: kubeadm init \
                 --image-repository registry.aliyuncs.com/google_containers  \
                 --apiserver-advertise-address={{ inventory_hostname }}   \
                 --pod-network-cidr={{ pod_network_cidr }} \
                 --service-cidr={{ service_cidr }}

    # setup kubectl for meta node users
    - name: Setup kubeconfig for vagrant user
      command: "{{ item }}"
      with_items:
       - mkdir -p /home/vagrant/.kube
       - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
       - chown vagrant:vagrant /home/vagrant/.kube/config
    - name: Setup kubeconfig for root user
      command: "{{ item }}"
      with_items:
       - mkdir -p /root/.kube
       - cp -i /etc/kubernetes/admin.conf /root/.kube/config
       - chown root:root /root/.kube/config

    # install add-on: calico and dashboard
    - name: Copy calio and k8s dashboard yml
      copy: src={{ item }} dest=/tmp/{{ item }}
      with_items: [calico.yaml, recommended.yaml]
    - name: Install calico pod network addon
      command: kubectl apply -f /tmp/calico.yaml       # https://docs.projectcalico.org/manifests/calico.yaml
    - name: Install kubernetes dashboard
      command: kubectl apply -f /tmp/recommended.yaml  # https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml

    # create dashboard sa service account (as role cluster-admin)
    - name: Create kubernetes-dashboard user
      command: "{{ item }}"
      with_items:
       - kubectl create serviceaccount dashboard-admin-sa
       - kubectl create clusterrolebinding dashboard-admin-sa --clusterrole=cluster-admin --serviceaccount=default:dashboard-admin-sa
       - chown root:root /root/.kube/config

    # fetch credentials
    - name: Generate kubernetes join scripts
      command: kubeadm token create --print-join-command
      register: join_command
    - name: Copy join command to local file
      become: no
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="roles/cloud/files/join.sh"

    - name: Cat /etc/kubernetes/admin.conf
      command: cat /etc/kubernetes/admin.conf
      register: admin_config
    - name: Copy admin.conf to local file
      become: no
      local_action: copy content="{{ admin_config.stdout }}" dest="roles/cloud/files/admin.config"

    - name: Get kubernetes secrets
      command: kubectl describe secret
      register: secret_result
    - name: Copy secret result to local file
      become: no
      local_action: copy content="{{ secret_result.stdout }}" dest="roles/cloud/files/secrets"


- name: Bootstrap kubernetes master node
  when: k8s_role != 'master'
  tags: k8s_nodes
  block:
    - name: Copy join.sh scripts to server
      copy: src=join.sh dest=/tmp/join.sh mode=0777
    - name: Join node to current k8s cluster
      command: bash /tmp/join.sh
...
