---

#--------------------------------------------------------------#
# 1. Install Grafana RPM
#--------------------------------------------------------------#
- name: Make sure grafana is installed
  tags: grafana_install
  package: name=grafana state=present

#--------------------------------------------------------------#
# 2. Install Plugins
#--------------------------------------------------------------#
- name: Install grafana plugins
  tags: grafana_plugin
  when: grafana_plugin != 'none'
  block:

    #--------------------------------------------------------------#
    # Check Cache Exists
    #--------------------------------------------------------------#
    - name: Check grafana plugin cache exists
      stat: path={{ grafana_cache }}
      register: grafana_plugins_cache


    #--------------------------------------------------------------#
    # Extract plugins cache if applicable
    #--------------------------------------------------------------#
    - name: Provision grafana plugins via cache
      when: grafana_plugins_cache.stat.exists
      shell: |
        rm -rf /var/lib/grafana/plugins
        tar -xf {{ grafana_cache }} -C /var/lib/grafana
        chown -R grafana /var/lib/grafana

    #--------------------------------------------------------------#
    # download plugins from web if 1. cache not exists, 2. reinstall mode
    #--------------------------------------------------------------#
    - name: Download grafana plugins from web
      when: not grafana_plugins_cache.stat.exists or grafana_plugin == 'reinstall'
      ignore_errors: true
      environment: "{{ proxy_env | default({}) }}"
      grafana_plugin: name={{ item }}
      with_items: "{{ grafana_plugins  }}"

    - name: Download grafana plugins from web
      when: not grafana_plugins_cache.stat.exists or grafana_plugin == 'reinstall'
      ignore_errors: true
      environment: "{{ proxy_env | default({}) }}"
      git:
        repo: '{{ item }}'
        dest: /var/lib/grafana/plugins/{{ item | basename }}
        update: yes
      with_items: "{{ grafana_git_plugins }}"

    #--------------------------------------------------------------#
    # Make new cache file after download
    #--------------------------------------------------------------#
    - name: Create grafana plugins cache
      when: not grafana_plugins_cache.stat.exists or grafana_plugin == 'reinstall'
      shell: |
        mkdir -p {{ grafana_cache | dirname }};
        tar -zcf {{ grafana_cache }} -C /var/lib/grafana/ plugins


#--------------------------------------------------------------#
# Config grafana
#--------------------------------------------------------------#
- name: Config Grafana
  tags: grafana_config
  block:
    # main config
    - name: Copy /etc/grafana/grafana.ini
      copy: src=grafana/grafana.ini dest=/etc/grafana/grafana.ini owner=grafana group=grafana

    # sqlite db provision
    - name: Copy grafana.db to data dir
      copy: src=grafana/grafana.db dest=/var/lib/grafana/grafana.db owner=grafana mode=0600


#--------------------------------------------------------------#
# Customize grafana
#--------------------------------------------------------------#
- name: Customize Grafana
  tags: grafana_customize
  when: grafana_customize|bool
  block:
    - name: Replace grafana icon with pigsty
      copy: src=logo.svg dest=/usr/share/grafana/public/img/grafana_icon.svg

#--------------------------------------------------------------#
# Launch grafana
#--------------------------------------------------------------#
- name: Launch Grafana
  tags: grafana_launch
  block:
    - name: Launch grafana service
      systemd: name=grafana-server state=restarted enabled=yes daemon_reload=yes

    - name: Wait for grafana online
      wait_for: host=localhost port=3000 state=started


- name: Register Grafana Service
  tags: grafana_register
  block:
    #--------------------------------------------------------------#
    # Register grafana
    #--------------------------------------------------------------#
    - name: Register consul grafana service
      template: src=svc-grafana.json.j2 dest=/etc/consul.d/svc-grafana.json owner=consul group=admin mode=0660

    - name: Reload consul
      systemd: name=consul state=reloaded enabled=yes daemon_reload=yes


#--------------------------------------------------------------#
# Provision Grafana
#--------------------------------------------------------------#
- name: Provision Grafana via API
  when: grafana_provision_mode == 'api'
  tags: grafana_provision
  block:
    #==============================================================#
    # Copy grafana dashboards
    #==============================================================#
    - name: Remove grafana dashboard dir
      file: path=/var/lib/grafana/dashboards state=directory owner=grafana mode=0755
    - name: Copy grafana dashboards json
      copy: src=grafana/dashboards/ dest=/var/lib/grafana/dashboards/ owner=grafana group=admin
    - name: Preprocess grafana dashboards
      command: python /var/lib/grafana/dashboards/reform.py

    #==============================================================#
    # Provision grafana datasource
    #==============================================================#
    - name: Provision prometheus datasource
      grafana_datasource:
        name: Prometheus
        grafana_url: "{{ grafana_url }}"
        grafana_user: admin
        grafana_password: "{{ grafana_admin_password | default('admin') }}"
        ds_type: prometheus
        ds_url: "http://localhost:9090"
        is_default: yes
        time_interval:

    #==============================================================#
    # Provision grafana dashboards
    #==============================================================#
    - name: Provision grafana dashboards
      grafana_dashboard:
        grafana_url: "{{ grafana_url }}"
        grafana_user: admin
        grafana_password: "{{ grafana_admin_password | default('admin') }}"
        state: present
        overwrite: yes
        path: /var/lib/grafana/dashboards/{{ item }}.json
      with_items: "{{ grafana_dashboards }}"

...