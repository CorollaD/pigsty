#!/usr/bin/env patroni

#==============================================================#
# File      :   patroni.yml
# Mtime     :   2020-04-08
# Desc      :   patroni cluster definition for {{ cluster }}
# Path      :   /pg/bin/patroni.yml
# Realpath  :   /pg/conf/{{ instance_name }}.yml
# Author    :   Vonng(fengruohang@outlook.com)
# Note      :   /pg/conf/patroni.yml
# Doc       : https://patroni.readthedocs.io/en/latest/SETTINGS.html
#==============================================================#

---
namespace: /pg/
scope: {{ cluster }}
name: {{ instance_name }}

restapi:
  listen: {{ inventory_hostname }}:8008
  connect_address: {{ inventory_hostname }}:8008

consul:
  host: 127.0.0.1:8500
  register_service: false

log:
  level: INFO
  dir: /pg/log/

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`

  dcs:

    # IMPORTANT PARAMETERS
    # constraint: ttl >= loop_wait + retry_timeout * 2

    # the TTL to acquire the leader lock (in seconds). Think of it as the length of time before initiation of the automatic failover process. Default value: 30
    ttl: 30

    # the number of seconds the loop will sleep. Default value: 10
    loop_wait: 5

    # timeout for DCS and PostgreSQL operation retries (in seconds). DCS or network issues shorter than this will not cause Patroni to demote the leader. Default value: 10
    retry_timeout: 10

    # the amount of time a master is allowed to recover from failures before failover is triggered (in seconds)
    # Max RTO: 2 loop wait + master_start_timeout
    master_start_timeout: 300

    # import: candidate will not be promoted if replication lag is higher than this
    # maximum RPO: 1MB
    maximum_lag_on_failover: 1048576

    # turns on synchronous replication mode. In this mode a replica will be chosen as synchronous and only the latest leader and synchronous replica are able to participate in leader election
    # set to true for RPO mode
    synchronous_mode: false

    # prevents disabling synchronous replication if no synchronous replicas are available, blocking all client writes to the master
    synchronous_mode_strict: false

    postgresql:
      use_pg_rewind: true
      remove_data_directory_on_rewind_failure: true
      use_slots: true

      parameters:
        # MUST SET
        max_connections: 200
        superuser_reserved_connections: 10
        max_locks_per_transaction: 64
        max_prepared_transactions: 0
        track_commit_timestamp: on
        max_worker_processes: 8
        wal_level: logical
        wal_log_hints: on
        max_wal_senders: 10
        max_replication_slots: 10
        wal_keep_segments: 100

        # additional configuration
        shared_buffers: 256MB
        maintenance_work_mem: 128MB
        wal_buffers: 16MB
        max_wal_size: 10GB
        min_wal_size: 500MB
        wal_receiver_status_interval: 1s
        hot_standby_feedback: on
        wal_receiver_timeout: 30s

        enable_partitionwise_join: on
        enable_partitionwise_aggregate: on
        random_page_cost: 1.0
        constraint_exclusion: partition
        effective_cache_size: 1GB

        log_destination: 'csvlog,stderr'
        logging_collector: on
        log_directory: 'log'
        log_filename: 'postgresql-%a.log'
        log_min_duration_statement: 1000
        log_checkpoints: on
        log_lock_waits: on
        log_statement: 'ddl'
        log_replication_commands: on

        # track_io_timing : on
        track_functions: all
        track_activity_query_size: 2048

        vacuum_cost_delay: 0
        vacuum_cost_limit: 10000
        vacuum_defer_cleanup_age: 500000

        autovacuum: on
        log_autovacuum_min_duration: 0
        autovacuum_max_workers: 3
        autovacuum_vacuum_scale_factor: 0.05
        autovacuum_analyze_scale_factor: 0.05
        autovacuum_vacuum_cost_delay: -1
        autovacuum_vacuum_cost_limit: -1

        checkpoint_timeout: 5min
        checkpoint_completion_target: 0.9

        shared_preload_libraries: 'pg_stat_statements, auto_explain'
        auto_explain.log_min_duration: 1min
        auto_explain.log_analyze: true
        auto_explain.log_verbose: true
        auto_explain.log_timing: true
        auto_explain.log_nested_statements: true
        pg_stat_statements.max: 10000
        pg_stat_statements.track: all



#  initdb:
#    - data-checksums
#    - encoding=UTF8
#    - locale=C
#
#  pg_hba:
#    - local   all             postgres                                ident
#    - local   replication     postgres                                ident
#    - local   replication     replicator                              md5
#    - host    replication     replicator        127.0.0.1/32          md5
#    - host    replication     replicator        ::1/128               md5
#    - host    replication     replicator        10.0.0.0/8            md5
#    - local   all             +dbrole_monitor                         md5
#    - host    all             +dbrole_monitor   127.0.0.1/32          md5
#    - host    all             +dbrole_monitor   ::1/128               md5
#    - local   all             all                                     md5
#    - host    all             all               0.0.0.0/0             md5
#    - host    all             all               ::0/0                 md5

  # this scripts is used for creating default users and databases
  # post_init: /pg/bin/initdb.sh



postgresql:

  bin_dir: /usr/pgsql/bin
  data_dir: /pg/data

  listen:  0.0.0.0:5432
  connect_address: {{ inventory_hostname }}:5432

  use_pg_rewind: true
  remove_data_directory_on_rewind_failure: true

  pgpass: /home/postgres/.pgpass
  authentication:
    superuser:
      username: postgres
      password: postgres
    replication:
      username: {{ replication_username }}
      password: {{ replication_password }}
    rewind:
      username: {{ replication_username }}
      password: {{ replication_password }}

  use_unix_socket: true
  parameters:
    unix_socket_directories: '/var/run/postgresql'

  # event callback
  callbacks:
    on_start: /pg/bin/callback.sh
    on_stop: /pg/bin/callback.sh
    on_role_change: /pg/bin/callback.sh

  create_replica_methods:
    - basebackup
  basebackup:
    max-rate: '100M'

watchdog:
  mode: automatic
  device: /dev/watchdog



tags:
  nofailover: false
  clonefrom: true
  noloadbalance: false
  nosync: false
