---
################################################################
# PHASE 1: [check] primary instance precondition
################################################################
- name: Check replica environment
  tags: pg_replica_check
  block:
    - name: Check replica postgres version
      shell: "[[ $(/usr/pgsql/bin/pg_ctl --version) == 'pg_ctl (PostgreSQL) {{ version }}'* ]]"

    # if postgres exists, if will abort, unless specify force to skip this check
    - name: Check replica instance not running
      when: not force
      shell: "ps aux | grep -v grep | grep -- '-D /pg/data' | grep pgsql || exit 0 && exit 1"

    - name: Set replica upstream and hba path
      set_fact:
        default_pg_hba_conf: "pg_hba-replica.conf"
        replication_source: "{{ upstream_ip | default(primary_ip) }}"



################################################################
# PHASE 2: [clean] existing stuff
################################################################
# DANGEROUS! remove all postgres data of target machine
- name: Cleanup postgresql
  tags: pg_replica_clean
  block:
    - name: Stop patroni service if exists
      ignore_errors: true
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: Stop postgres replica service
      ignore_errors: true
      systemd: name=postgres state=stopped enabled=no daemon_reload=yes

    # in case that postgres is start manually via pg_ctl
    - name: Stop running postgres double check
      become_user: postgres
      shell: |
        pg_exist=$(ps aux | grep -v grep | grep -- '-D /pg/data' | grep pgsql | wc -l)
        if (( $pg_exist==1 )); then
            /usr/pgsql/bin/pg_ctl -D /pg/data stop
        fi
        exit 0

    - name: Remove existing /pg/data directory
      file: path=/pg/data state=absent

    - name: Recreate default /pg/data directory
      file: path=/pg/data state=directory owner=postgres group=postgres mode=0700



################################################################
# PHASE 3: [initdb] create database cluster
################################################################
- name: Init database replica from primary
  tags: pg_replica_init
  block:
    - name: Write pgpass with default userinfo
      copy:
        content: |
          *:*:*:{{ replication_username }}:{{ replication_password }}
          *:*:*:{{ monitor_username }}:{{ monitor_password }}
        dest: /home/postgres/.pgpass
        owner: postgres
        group: postgres
        mode: 0600

    # add default user/pass to pgpass
    - name: Add replication user to pgpass
      when: default_creation is defined and default_creation|bool
      lineinfile:
        path: /home/postgres/.pgpass
        line: "*:*:*:{{ default_username }}:{{ default_password }}"
        create: yes

    # check primary is available
    - name: Check connectivity to primary
      become_user: postgres
      command: psql -h {{ primary_ip }} -U {{ replication_username }} -d postgres -Atc 'SELECT 1;'

    # create basebackup from primary
    - name: Create basebackup from primary
      become_user: postgres
      command: /usr/pgsql/bin/pg_basebackup -h {{ primary_ip }} -U {{ replication_username }} -D /pg/data -Fp -Xs -Pv -R -c fast
      async: 0



################################################################
# PHASE 4: [config] postgres
################################################################
# use custome postgresql.conf via ( override with -e pgconf=/path/to/postgresql.conf )
- name: Config postgresql replica
  tags: pg_replica_config
  block:
    - name: Copy replica default postgresql.conf
      when: postgresql_conf_path is defined
      template:
        src: "{{ postgresql_conf_path }}"
        dest: /pg/data/postgresql.conf
        owner: postgres
        group: postgres
        mode: 0600

    - name: Copy replica default pg_hba.conf
      template:
        src: "{{ replica_pg_hba_path | default(default_pg_hba_conf) }}"
        dest: /pg/data/pg_hba.conf
        owner: postgres
        group: postgres
        mode: 0600

    # cascade replication could be achieved here
    - name: Setup replica replication source
      lineinfile:
        path: /pg/data/postgresql.auto.conf
        regexp: "^primary_conninfo"
        line: "primary_conninfo = 'host={{ replication_source }} port=5432  application_name=''{{ instance_name }}'' user=''{{ replication_username }}'' passfile=''/home/postgres/.pgpass'''"
        owner: postgres
        group: postgres
        mode: 0600




################################################################
# PHASE 5: [launch] postgresql service
################################################################
# launch postgres @ default 5432 port
- name: Launch PostgreSQL service
  tags: pg_replica_launch
  block:
    - name: Start replica postgres service
      systemd: name=postgres state=restarted enabled=yes daemon_reload=yes

    - name: Waits for replica postgres online
      wait_for: host=localhost port=5432 state=started timeout=10

    - name: Check replica postgres is ready
      become_user: postgres
      command: /usr/pgsql/bin/pg_isready
