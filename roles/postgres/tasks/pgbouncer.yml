---
#------------------------------------------------------------------------------
# Check pgbouncer installed
#------------------------------------------------------------------------------
- name: Check pgbouncer is installed
  tags: pgbouncer_check
  shell: "[[ -f /bin/pgbouncer ]]"


#------------------------------------------------------------------------------
# Cleanup existing pgbouncer
#------------------------------------------------------------------------------
- name: Cleanup pgbouncer
  tags: pgbouncer_cleanup
  block:
    - name: Stop existing pgbouncer service
      ignore_errors: true
      systemd: name=pgbouncer state=stopped enabled=no daemon_reload=yes

    - name: Remove existing pgbouncer dirs
      file: path={{ item }} state=absent
      with_items:
        - /etc/pgbouncer
        - /var/log/pgbouncer
        - /var/run/pgbouncer

    - name: Recreate dirs with owner postgres
      file: path={{ item }} state=directory owner={{ pg_dbsu }} group=postgres mode=0750
      with_items:
        - /etc/pgbouncer
        - /var/log/pgbouncer
        - /var/run/pgbouncer


#------------------------------------------------------------------------------
# Config pgbouncer
#------------------------------------------------------------------------------
- name: Config pgbouncer
  tags: pgbouncer_config
  block:
    - name: Copy /etc/pgbouncer/pgbouncer.ini
      template: src=pgbouncer.ini.j2 dest=/etc/pgbouncer/pgbouncer.ini owner={{ pg_dbsu }} group=postgres mode=0600

    - name: Copy /etc/pgbouncer/pgb_hba.conf
      template: src=pgb_hba.conf.j2 dest=/etc/pgbouncer/pgb_hba.conf owner={{ pg_dbsu }} group=postgres mode=0600

    - name: Add system users to pgbouncer
      become_user: "{{ pg_dbsu }}"
      shell: |
        /pg/bin/pgb-user-add {{ pg_dbsu }}
        /pg/bin/pgb-user-add "{{ pg_monitor_username }}" "{{ pg_monitor_password }}"

    - name: Add default users to pgbouncer
      become_user: "{{ pg_dbsu }}"
      shell: |
        /pg/bin/pgb-user-add "{{ pg_default_username }}" "{{ pg_default_username }}"

    - name: Add default database to pgbouncer
      when: pg_default_database != 'postgres'
      become_user: "{{ pg_dbsu }}"
      shell: /pg/bin/pgb-db-add {{ pg_default_database }}


#------------------------------------------------------------------------------
# Launch pgbouncer
#------------------------------------------------------------------------------
- name: Launch pgbouncer
  tags: pgbouncer_launch
  block:
    # pgbouncer systemd services
    - name: Copy pgbouncer systemd service
      copy: src=pgbouncer.service dest=/etc/systemd/system/pgbouncer.service owner=root mode=0644

    - name: Launch pgbouncer pool service
      systemd: name=pgbouncer state=restarted enabled=yes daemon_reload=yes

    - name: Wait for pgbouncer service online
      wait_for: host=localhost port={{ pgbouncer_port }} state=started timeout=10

    - name: Check pgbouncer service is ready
      become_user: "{{ pg_dbsu }}"
      command: /usr/pgsql/bin/pg_isready -p {{ pgbouncer_port }}

    - name: Check pgbouncer connectivity
      when: pg_default_username != 'postgres'
      become_user: "{{ pg_dbsu }}"
      environment:
        PGPASSWORD: "{{ pg_default_password }}"
      command: psql -w -p{{ pgbouncer_port }} -U {{ pg_default_username }} -d {{ pg_default_database }} -Atc 'SELECT 1;'


...